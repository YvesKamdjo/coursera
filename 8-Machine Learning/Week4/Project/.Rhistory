}
trainurl <- "pml-training.csv"
trainingCSV <- getPMLcsv(trainurl, c("", "NA", "#DIV/0!"))
train_partion <- createDataPartition(trainingCSV$classe, p=0.7)
training <- trainingCSV[train_partion,]
testing <- trainingCSV[-train_partion,]
set.seed(5463)
control <- trainControl(method = 'cv', number = 5)
library(gbm)
fit.gbm <- gbm(classe~., n.trees = 10, data = training)
pred.gbm <- predict(fit.gbm,newdata=testing, n.trees = 10)
confusionMatrix(testing$classe,pred.gbm)$overall['Accuracy']
require(caret)
getPMLcsv <- function(url, nas) {
#temp <- tempfile()
#download.file(url, temp, method = "curl")
data <- read.csv(url, na.strings = nas)
#unlink(temp)
cols <- nearZeroVar(data)
data <- data[, -cols]
return(data)
}
trainurl <- "pml-training.csv"
trainingCSV <- getPMLcsv(trainurl, c("", "NA", "#DIV/0!"))
train_partion <- createDataPartition(trainingCSV$classe, p=0.7)
training <- trainingCSV[train_partion,]
testing <- trainingCSV[-train_partion,]
dim(training)
dim(testing)
require(caret)
getPMLcsv <- function(url, nas) {
#temp <- tempfile()
#download.file(url, temp, method = "curl")
data <- read.csv(url, na.strings = nas)
#unlink(temp)
cols <- nearZeroVar(data)
data <- data[, -cols]
return(data)
}
trainurl <- "pml-training.csv"
trainingCSV <- getPMLcsv(trainurl, c("", "NA", "#DIV/0!"))
train_partion <- createDataPartition(trainingCSV$classe, p=0.7)
training <- trainingCSV[train_partion,]
testing <- trainingCSV[-train_partion,]
dim(testing)
require(caret)
getPMLcsv <- function(url, nas) {
#temp <- tempfile()
#download.file(url, temp, method = "curl")
data <- read.csv(url, na.strings = nas)
#unlink(temp)
cols <- nearZeroVar(data)
data <- data[, -cols]
return(data)
}
trainurl <- "pml-training.csv"
trainingCSV <- getPMLcsv(trainurl, c("", "NA", "#DIV/0!"))
train_partion <- createDataPartition(y=trainingCSV$classe, p=0.7, list = FALSE)
training <- trainingCSV[train_partion,]
testing <- trainingCSV[-train_partion,]
dim(testing)
require(caret)
getPMLcsv <- function(url, nas) {
#temp <- tempfile()
#download.file(url, temp, method = "curl")
data <- read.csv(url, na.strings = nas)
#unlink(temp)
cols <- nearZeroVar(data)
data <- data[, -cols]
return(data)
}
trainurl <- "pml-training.csv"
trainingCSV <- getPMLcsv(trainurl, c("", "NA", "#DIV/0!"))
train_partion <- createDataPartition(y=trainingCSV$classe, p=0.7, list = FALSE)
training <- trainingCSV[train_partion,]
testing <- trainingCSV[-train_partion,]
dim(training)
require(caret)
getPMLcsv <- function(url, nas) {
#temp <- tempfile()
#download.file(url, temp, method = "curl")
data <- read.csv(url, na.strings = nas)
#unlink(temp)
cols <- nearZeroVar(data)
data <- data[, -cols]
return(data)
}
trainurl <- "pml-training.csv"
trainingCSV <- getPMLcsv(trainurl, c("", "NA", "#DIV/0!"))
train_partion <- createDataPartition(y=trainingCSV$classe, p=0.7, list = FALSE)
training <- trainingCSV[train_partion,]
testing <- trainingCSV[-train_partion,]
set.seed(5463)
control <- trainControl(method = 'cv', number = 5)
fit.rf <- train(classe~., method='rf', data= training)
fit.rf$finalModel
library(gbm)
fit.gbm <- gbm(classe~., n.trees = 10, data = training)
pred.gbm <- predict(fit.gbm,newdata=testing, n.trees = 10)
confusionMatrix(testing$classe,pred.gbm)$overall['Accuracy']
require(caret)
getPMLcsv <- function(url, nas) {
#temp <- tempfile()
#download.file(url, temp, method = "curl")
data <- read.csv(url, na.strings = nas)
#unlink(temp)
cols <- nearZeroVar(data)
data <- data[, -cols]
return(data)
}
trainurl <- "pml-training.csv"
trainingCSV <- getPMLcsv(trainurl, c("", "NA", "#DIV/0!"))
train_partion <- createDataPartition(y=trainingCSV$classe, p=0.7, list = FALSE)
training <- trainingCSV[train_partion,]
testing <- trainingCSV[-train_partion,]
set.seed(5463)
fit.gbm <- train(classe~., method="gbm", data= training) #gbm(classe~., n.trees = 10, data = training)
fit.gbm$finaModel
fit.gbm$results
fit.gbm$finalModel
predict(fit.gbm, testing$classe)
predict(fit.gbm, newdata=testing)
confusionMatrix(fit.gbm, predict(fit.gbm, newdata=testing))
confusionMatrix(fit.gbm, predict(fit.gbm, newdata=testing))$overall['Accuracy']
confusionMatrix( predict(fit.gbm, newdata=testing),fit.gbm)$overall['Accuracy']
?confusionMatrix
confusionMatrix(testing$classe, predict(fit.gbm, newdata=testing))$overall['Accuracy']
require(caret)
getPMLcsv <- function(url, nas) {
#temp <- tempfile()
#download.file(url, temp, method = "curl")
data <- read.csv(url, na.strings = nas)
#unlink(temp)
cols <- nearZeroVar(data)
data <- data[, -cols]
return(data)
}
trainurl <- "pml-training.csv"
trainingCSV <- getPMLcsv(trainurl, c("", "NA", "#DIV/0!"))
train_partion <- createDataPartition(y=trainingCSV$classe, p=0.7, list = FALSE)
training <- trainingCSV[train_partion,]
testing <- trainingCSV[-train_partion,]
set.seed(5463)
control <- trainControl(method = 'cv', number = 5)
fit.rf <- train(classe~., method='rf', data= training)
fit.gbm <- train(classe~., method="gbm", data= training)
pred.gbm <- predict(fit.gbm, newdata=testing)
pred.rf <- predict(fit.rf, newdata = testing)
confusionMatrix(testing$classe, pred.gbm)$overall['Accuracy']
confusionMatrix(testing$classe, pred.rf)$overall['Accuracy']
pred.gbm
length(pred.gbm)
length(pred.rf)
length(testing)
dim(pred.gbm)
fit.gbm$finalModel
require(caret)
getPMLcsv <- function(url, nas) {
#temp <- tempfile()
#download.file(url, temp, method = "curl")
data <- read.csv(url, na.strings = nas)
#unlink(temp)
return(data)
}
trainurl <- "pml-training.csv"
trainingCSV <- getPMLcsv(trainurl, c("", "NA", "#DIV/0!"))
train_partion <- createDataPartition(y=trainingCSV$classe, p=0.7, list = FALSE)
training <- trainingCSV[train_partion,]
testing <- trainingCSV[-train_partion,]
cols <- nearZeroVar(training)
training <- training[, -cols]
set.seed(5463)
control <- trainControl(method = 'cv', number = 5)
fit.rf <- train(classe~., method='rf', data= training)
fit.gbm <- train(classe~., method="gbm", data= training)
pred.gbm <- predict(fit.gbm, newdata=testing)
pred.rf <- predict(fit.rf, newdata = testing)
confusionMatrix(testing$classe, pred.gbm)$overall['Accuracy']
confusionMatrix(testing$classe, pred.rf)$overall['Accuracy']
warning()
fit.gbm$finalModel
fit.rf$finalModel
pred.rf
summary(pred.rf)
require(caret)
getPMLcsv <- function(url, nas) {
#temp <- tempfile()
#download.file(url, temp, method = "curl")
data <- read.csv(url, na.strings = nas)
#unlink(temp)
return(data)
}
trainurl <- "pml-training.csv"
trainingCSV <- getPMLcsv(trainurl, c("", "NA", "#DIV/0!"))
train_partion <- createDataPartition(y=trainingCSV$classe, p=0.7, list = FALSE)
training <- trainingCSV[train_partion,]
testing <- trainingCSV[-train_partion,]
cols <- nearZeroVar(training)
training <- training[, -cols]
# exclude columns with m40% ore more missing values exclude descriptive
# columns like name etc
cntlength <- sapply(training, function(x) {
sum(!(is.na(x) | x == ""))
})
nullcol <- names(cntlength[cntlength < 0.6 * length(training$classe)])
descriptcol <- c("X", "user_name", "raw_timestamp_part_1", "raw_timestamp_part_2",
"cvtd_timestamp", "new_window", "num_window")
excludecols <- c(descriptcol, nullcol)
training <- training[, !names(training) %in% excludecols]
set.seed(5463)
control <- trainControl(method = 'cv', number = 5)
fit.rf <- train(classe~., method='rf', data= training)
fit.gbm <- train(classe~., method="gbm", data= training)
pred.gbm <- predict(fit.gbm, newdata=testing)
pred.rf <- predict(fit.rf, newdata = testing)
confusionMatrix(pred.rf,testing$classe )$overall['Accuracy']
confusionMatrix(testing$classe, pred.gbm)$overall['Accuracy']
author: "YE"
?nearZeroVar
setwd("C:/Users/Julien/Google Drive/Coursera/8-Machine Learning/Week4/Project")
require(caret)
getPMLcsv <- function(url, nas) {
#temp <- tempfile()
#download.file(url, temp, method = "curl")
data <- read.csv(url, na.strings = nas)
#unlink(temp)
return(data)
}
trainurl <- "pml-training.csv"
trainingCSV <- getPMLcsv(trainurl, c("", "NA", "#DIV/0!"))
train_partion <- createDataPartition(y=trainingCSV$classe, p=0.7, list = FALSE)
training <- trainingCSV[train_partion,]
testing <- trainingCSV[-train_partion,]
cols <- nearZeroVar(training)
training <- training[, -cols]
# exclude columns with m40% ore more missing values exclude descriptive
# columns like name etc
whichcolsneedtogo<-apply(training, 1, function(currow){all(is.na(currow)) || (currow["missing values"] > 500)})
whichcolsneedtogo
require(caret)
getPMLcsv <- function(url, nas) {
#temp <- tempfile()
#download.file(url, temp, method = "curl")
data <- read.csv(url, na.strings = nas)
#unlink(temp)
return(data)
}
trainurl <- "pml-training.csv"
trainingCSV <- getPMLcsv(trainurl, c("", "NA", "#DIV/0!"))
train_partion <- createDataPartition(y=trainingCSV$classe, p=0.7, list = FALSE)
training <- trainingCSV[train_partion,]
testing <- trainingCSV[-train_partion,]
cols <- nearZeroVar(training)
training <- training[, -cols]
dim(training)
lim <- nrow(training)/3
training <- training[, colSums(is.na(training)) >= lim]
dim(training)
require(caret)
getPMLcsv <- function(url, nas) {
#temp <- tempfile()
#download.file(url, temp, method = "curl")
data <- read.csv(url, na.strings = nas)
#unlink(temp)
return(data)
}
trainurl <- "pml-training.csv"
trainingCSV <- getPMLcsv(trainurl, c("", "NA", "#DIV/0!"))
train_partion <- createDataPartition(y=trainingCSV$classe, p=0.7, list = FALSE)
training <- trainingCSV[train_partion,]
testing <- trainingCSV[-train_partion,]
cols <- nearZeroVar(training)
training <- training[, -cols]
dim(training)
lim <- nrow(training)*0.3
training <- training[, colSums(is.na(training)) < lim]
dim(training)
require(caret)
getPMLcsv <- function(url, nas) {
#temp <- tempfile()
#download.file(url, temp, method = "curl")
data <- read.csv(url, na.strings = nas)
#unlink(temp)
return(data)
}
set.seed(5436)
trainurl <- "pml-training.csv"
trainingCSV <- getPMLcsv(trainurl, c("", "NA", "#DIV/0!"))
train_partion <- createDataPartition(y=trainingCSV$classe, p=0.7, list = FALSE)
training <- trainingCSV[train_partion,]
testing <- trainingCSV[-train_partion,]
dim(training)
cols <- nearZeroVar(training)
training <- training[, -cols]
dim(training)
lim <- nrow(training)*0.3
training <- training[, colSums(is.na(training)) < lim]
dim(training)
require(caret)
getPMLcsv <- function(url, nas) {
#temp <- tempfile()
#download.file(url, temp, method = "curl")
data <- read.csv(url, na.strings = nas)
#unlink(temp)
return(data)
}
set.seed(5436)
trainurl <- "pml-training.csv"
trainingCSV <- getPMLcsv(trainurl, c("", "NA", "#DIV/0!"))
train_partion <- createDataPartition(y=trainingCSV$classe, p=0.7, list = FALSE)
training <- trainingCSV[train_partion,]
testing <- trainingCSV[-train_partion,]
dim(training)
cols <- nearZeroVar(training)
training <- training[, -cols]
dim(training)
lim <- nrow(training)*0.3
training <- training[, colSums(is.na(training)) < lim]
dim(training)
head(training)
?colSums
require(caret)
getPMLcsv <- function(url, nas) {
#temp <- tempfile()
#download.file(url, temp, method = "curl")
data <- read.csv(url, na.strings = nas)
#unlink(temp)
return(data)
}
set.seed(5436)
trainurl <- "pml-training.csv"
trainingCSV <- getPMLcsv(trainurl, c("", "NA", "#DIV/0!"))
train_partion <- createDataPartition(y=trainingCSV$classe, p=0.7, list = FALSE)
training <- trainingCSV[train_partion,]
testing <- trainingCSV[-train_partion,]
dim(training)
cols <- nearZeroVar(training)
training <- training[, -cols]
dim(training)
limit <- nrow(training)*0.6
OkCols <- !apply(training, 2, function(x) sum(is.na(x)) > limit  || sum(x=="") > treshold)
training <- training[, OkCols]
dim(training)
require(caret)
getPMLcsv <- function(url, nas) {
#temp <- tempfile()
#download.file(url, temp, method = "curl")
data <- read.csv(url, na.strings = nas)
#unlink(temp)
return(data)
}
set.seed(5436)
trainurl <- "pml-training.csv"
trainingCSV <- getPMLcsv(trainurl, c("", "NA", "#DIV/0!"))
train_partion <- createDataPartition(y=trainingCSV$classe, p=0.7, list = FALSE)
training <- trainingCSV[train_partion,]
testing <- trainingCSV[-train_partion,]
dim(training)
cols <- nearZeroVar(training)
training <- training[, -cols]
dim(training)
limit <- nrow(training)*0.6
OkCols <- !apply(training, 2, function(x) sum(is.na(x)) > limit  || sum(x=="") > limit)
training <- training[, OkCols]
dim(training)
require(caret)
getPMLcsv <- function(url, nas) {
#temp <- tempfile()
#download.file(url, temp, method = "curl")
data <- read.csv(url, na.strings = nas)
#unlink(temp)
return(data)
}
set.seed(5436)
trainurl <- "pml-training.csv"
trainingCSV <- getPMLcsv(trainurl, c("", "NA", "#DIV/0!"))
train_partion <- createDataPartition(y=trainingCSV$classe, p=0.7, list = FALSE)
training <- trainingCSV[train_partion,]
testing <- trainingCSV[-train_partion,]
dim(training)
cols <- nearZeroVar(training)
training <- training[, -cols]
dim(training)
limit <- nrow(training)*0.6
OkCols <- !apply(training, 2, function(x) sum(is.na(x)) > limit  || sum(x=="") > limit)
training <- training[, OkCols]
dim(training)
set.seed(5463)
fitControl <- trainControl(## 10-fold CV
method = "repeatedcv",
number = 10,
## repeated ten times
repeats = 10)
fit.rf <- train(classe~., method='rf', data= training, trControl=fitControl)
require(caret)
getPMLcsv <- function(url, nas) {
#temp <- tempfile()
#download.file(url, temp, method = "curl")
data <- read.csv(url, na.strings = nas)
#unlink(temp)
return(data)
}
set.seed(5436)
trainurl <- "pml-training.csv"
trainingCSV <- getPMLcsv(trainurl, c("", "NA", "#DIV/0!"))
train_partion <- createDataPartition(y=trainingCSV$classe, p=0.7, list = FALSE)
training <- trainingCSV[train_partion,]
testing <- trainingCSV[-train_partion,]
dim(training)
cols <- nearZeroVar(training)
training <- training[, -cols]
dim(training)
nullcol <- names(cntlength[cntlength < 0.6 * length(training$classe)])
descriptcol <- c("X", "user_name", "raw_timestamp_part_1", "raw_timestamp_part_2",
"cvtd_timestamp", "new_window", "num_window")
excludecols <- c(descriptcol, nullcol)
training <- training[, !names(training) %in% excludecols]
set.seed(5463)
fitControl <- trainControl(## 10-fold CV
method = "repeatedcv",
number = 10,
## repeated ten times
repeats = 10)
fit.rf <- train(classe~., method='rf', data= training, trControl=fitControl)
setwd("C:/Users/Julien/Google Drive/Coursera/8-Machine Learning/Week4/Project")
library(caret)
trainingCSV <- read.csv('pml-training.csv', na.strings = c("", "NA", "#DIV/0!"))
##Subsetting and Cleaning data set
train_partion <- createDataPartition(y=trainingCSV$classe, p=0.7, list = FALSE)
training <- trainingCSV[train_partion,]
testing <- trainingCSV[-train_partion,]
##Cleaning data : Remove near zero variables with the caret package function nearzero
cols <- nearZeroVar(training)
training <- training[, -cols]
## create another subset without NZV variables:
NZVvars <- names(training) %in% c("new_window", "kurtosis_roll_belt", "kurtosis_picth_belt",
"kurtosis_yaw_belt", "skewness_roll_belt", "skewness_roll_belt.1", "skewness_yaw_belt",
"max_yaw_belt", "min_yaw_belt", "amplitude_yaw_belt", "avg_roll_arm", "stddev_roll_arm",
"var_roll_arm", "avg_pitch_arm", "stddev_pitch_arm", "var_pitch_arm", "avg_yaw_arm",
"stddev_yaw_arm", "var_yaw_arm", "kurtosis_roll_arm", "kurtosis_picth_arm",
"kurtosis_yaw_arm", "skewness_roll_arm", "skewness_pitch_arm", "skewness_yaw_arm",
"max_roll_arm", "min_roll_arm", "min_pitch_arm", "amplitude_roll_arm", "amplitude_pitch_arm",
"kurtosis_roll_dumbbell", "kurtosis_picth_dumbbell", "kurtosis_yaw_dumbbell", "skewness_roll_dumbbell",
"skewness_pitch_dumbbell", "skewness_yaw_dumbbell", "max_yaw_dumbbell", "min_yaw_dumbbell",
"amplitude_yaw_dumbbell", "kurtosis_roll_forearm", "kurtosis_picth_forearm", "kurtosis_yaw_forearm",
"skewness_roll_forearm", "skewness_pitch_forearm", "skewness_yaw_forearm", "max_roll_forearm",
"max_yaw_forearm", "min_roll_forearm", "min_yaw_forearm", "amplitude_roll_forearm",
"amplitude_yaw_forearm", "avg_roll_forearm", "stddev_roll_forearm", "var_roll_forearm",
"avg_pitch_forearm", "stddev_pitch_forearm", "var_pitch_forearm", "avg_yaw_forearm",
"stddev_yaw_forearm", "var_yaw_forearm")
training <- training[!NZVvars]
training_bis <- training
for(i in 1:length(training)) { #for every column in the training dataset
if( sum( is.na( training[, i] ) ) /nrow(training) >= .6 ) { #if n?? NAs > 60% of total observations
for(j in 1:length(training_bis)) {
if( length( grep(names(training[i]), names(training_bis)[j]) ) ==1)  { #if the columns are the same:
training_bis <- training_bis[ , -j] #Remove that column
}
}
}
}
training <- training_bis
dim(training)
fitControl <- trainControl(## 10-fold CV
method = "repeatedcv",
number = 10,
## repeated ten times
repeats = 10)
fit.rf <- train(classe~., method='rf', data= training, trControl=fitControl)
library(caret)
trainingCSV <- read.csv('pml-training.csv', na.strings = c("", "NA", "#DIV/0!"))
##Subsetting and Cleaning data set
train_partion <- createDataPartition(y=trainingCSV$classe, p=0.7, list = FALSE)
training <- trainingCSV[train_partion,]
testing <- trainingCSV[-train_partion,]
##Cleaning data : Remove near zero variables with the caret package function nearzero
cols <- nearZeroVar(training)
training <- training[, -cols]
## create another subset without NZV variables:
NZVvars <- names(training) %in% c("new_window", "kurtosis_roll_belt", "kurtosis_picth_belt",
"kurtosis_yaw_belt", "skewness_roll_belt", "skewness_roll_belt.1", "skewness_yaw_belt",
"max_yaw_belt", "min_yaw_belt", "amplitude_yaw_belt", "avg_roll_arm", "stddev_roll_arm",
"var_roll_arm", "avg_pitch_arm", "stddev_pitch_arm", "var_pitch_arm", "avg_yaw_arm",
"stddev_yaw_arm", "var_yaw_arm", "kurtosis_roll_arm", "kurtosis_picth_arm",
"kurtosis_yaw_arm", "skewness_roll_arm", "skewness_pitch_arm", "skewness_yaw_arm",
"max_roll_arm", "min_roll_arm", "min_pitch_arm", "amplitude_roll_arm", "amplitude_pitch_arm",
"kurtosis_roll_dumbbell", "kurtosis_picth_dumbbell", "kurtosis_yaw_dumbbell", "skewness_roll_dumbbell",
"skewness_pitch_dumbbell", "skewness_yaw_dumbbell", "max_yaw_dumbbell", "min_yaw_dumbbell",
"amplitude_yaw_dumbbell", "kurtosis_roll_forearm", "kurtosis_picth_forearm", "kurtosis_yaw_forearm",
"skewness_roll_forearm", "skewness_pitch_forearm", "skewness_yaw_forearm", "max_roll_forearm",
"max_yaw_forearm", "min_roll_forearm", "min_yaw_forearm", "amplitude_roll_forearm",
"amplitude_yaw_forearm", "avg_roll_forearm", "stddev_roll_forearm", "var_roll_forearm",
"avg_pitch_forearm", "stddev_pitch_forearm", "var_pitch_forearm", "avg_yaw_forearm",
"stddev_yaw_forearm", "var_yaw_forearm")
training <- training[!NZVvars]
training_bis <- training
for(i in 1:length(training)) { #for every column in the training dataset
if( sum( is.na( training[, i] ) ) /nrow(training) >= .6 ) { #if n?? NAs > 60% of total observations
for(j in 1:length(training_bis)) {
if( length( grep(names(training[i]), names(training_bis)[j]) ) ==1)  { #if the columns are the same:
training_bis <- training_bis[ , -j] #Remove that column
}
}
}
}
training <- training_bis
fitControl <- trainControl(## 10-fold CV
method = "repeatedcv",
number = 10,
## repeated ten times
repeats = 10)
fit.rf <- train(classe~., method='rf', data= training)#trControl=fitControl
